%%%-------------------------------------------------------------------
%%% @author Evgeniy Khramtsov <ekhramtsov@process-one.net>
%%% @copyright (C) 2013, Evgeniy Khramtsov
%%% @doc
%%% Rebar build script. Compliant with rebar and rebar3.
%%% @end
%%% Created :  8 May 2013 by Evgeniy Khramtsov <ekhramtsov@process-one.net>
%%%-------------------------------------------------------------------

Cfg = case file:consult("vars.config") of
          {ok, Terms} ->
              Terms;
          _Err ->
              []
      end ++ [{cflags, "-g -O2 -Wall"}, {ldflags, "-lexpat"}, {with_gcov, "false"}],
{cflags, CfgCFlags} = lists:keyfind(cflags, 1, Cfg),
{ldflags, CfgLDFlags} = lists:keyfind(ldflags, 1, Cfg),
{with_gcov, CfgWithGCov} = lists:keyfind(with_gcov, 1, Cfg),


ModCfg0 = fun(F, Cfg, [Key|Tail], Op, Default) ->
                 {OldVal,PartCfg} = case lists:keytake(Key, 1, Cfg) of
                                        {value, {_, V1}, V2} -> {V1, V2};
                                        false -> {if Tail == [] -> Default; true -> [] end, Cfg}
                                    end,
                 case Tail of
                     [] ->
                         [{Key, Op(OldVal)} | PartCfg];
                     _ ->
                         [{Key, F(F, OldVal, Tail, Op, Default)} | PartCfg]
                 end
         end,
ModCfg = fun(Cfg, Keys, Op, Default) -> ModCfg0(ModCfg0, Cfg, Keys, Op, Default) end.
ModCfgS = fun(Cfg, Keys, Val) -> ModCfg0(ModCfg0, Cfg, Keys, fun(_V) -> Val end, "") end.

Cfg0 = ModCfg(CONFIG, [port_env, "CFLAGS"], fun(V) -> V ++ " " ++ CfgCFlags end, "$CFLAGS"),
Cfg00 = ModCfg(Cfg0, [port_env, "LDFLAGS"], fun(V) -> V ++ " " ++ CfgLDFlags end, "$LDFLAGS"),
Cfg1 = case CfgWithGCov of
           "true" ->
               V1 = ModCfg(Cfg00, [post_hooks], fun(V) -> V ++ [{eunit, "gcov c_src/xml c_src/xml_stream"}, {eunit, "mv *.gcov .eunit/"}] end, []),
               V2 = ModCfg(V1, [port_env, "LDFLAGS"], fun(V) -> V ++ " -fprofile-arcs" end, ""),
               ModCfg(V2, [port_env, "CFLAGS"], fun(V) -> V ++ " -ftest-coverage -fprofile-arcs" end, "");
           _ ->
               Cfg00
       end,

%% When running Travis test, upload test coverage result to coveralls:
Config = case os:getenv("TRAVIS") of
             "true" ->
                 JobId = os:getenv("TRAVIS_JOB_ID"),
                 Cfg2 = ModCfg(Cfg1, [deps], fun(V) -> [{coveralls, ".*", {git, "https://github.com/markusn/coveralls-erl.git", "master"}}|V] end, []),
                 Cfg3 = ModCfgS(Cfg2, [plugin_dir], "deps/coveralls/src"),
                 Cfg4 = ModCfg(Cfg3, [plugins], fun(V) -> (V -- [rebar3_hex]) ++ [rebar_coveralls] end, []),
                 Cfg5 = ModCfgS(Cfg4, [coveralls_coverdata], ".eunit/cover.coverdata"),
                 Cfg6 = ModCfgS(Cfg5, [coveralls_service_job_id], JobId),
                 ModCfgS(Cfg6, [coveralls_service_name], "travis-ci");
             _ ->
                 case code:is_loaded(rebar3) of
                     {file, _} ->
                         Cfg1;
                     false ->
                         ModCfg(Cfg1, [plugins], fun(V) -> V -- [rebar3_hex] end, [])
                 end
         end,

%%io:format("xml configuration:~n  ~p~n", [Config]),
Config.

%% Local Variables:
%% mode: erlang
%% End:
%% vim: set filetype=erlang tabstop=8:
